apply plugin: 'java'
apply plugin: 'application'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://jitpack.io" }
    maven { url "https://nifty-gui.sourceforge.net/nifty-maven-repo" }
}

dependencies {
    runtimeOnly files("src/main/resources/native/${getNativeFolder()}")
    implementation 'org.lwjgl:lwjgl:3.2.3'
    implementation 'org.lwjgl:lwjgl-glfw:3.2.3'
    implementation 'org.lwjgl:lwjgl-opengl:3.2.3'
}

application {
    mainClassName = 'fr.iamacat.iamacatblockgame.Main'
}

compileJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'
    options.incremental = true
}

task createManifest {
    doLast {
        def manifestDir = "${outputDir}/META-INF"
        file(manifestDir).mkdirs()

        def manifestFile = file("${manifestDir}/MANIFEST.MF")
        manifestFile.createNewFile()

        def manifestContent = """
            Manifest-Version: 1.0
            Main-Class: fr.iamacat.iamacatblockgame.Main
        """.stripIndent()

        manifestFile.write(manifestContent)
    }
}

jar {
    dependsOn createManifest
    from tasks.createManifest.manifestFile
}

// # todo make it work for x86 x64 linux,windows,mac
def getNativeFolder() {
    String osName = System.getProperty("os.name").toLowerCase()

    if (osName.contains("win")) {
        return "windows"
    } else if (osName.contains("mac")) {
        return "macosx"
    } else if (osName.contains("linux")) {
        return "linux"
    } else {
        throw new UnsupportedOperationException("Unsupported operating system: " + osName)
    }
}