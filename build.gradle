
apply plugin: 'java'
apply plugin: 'application'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://jitpack.io" }
    maven { url "https://nifty-gui.sourceforge.net/nifty-maven-repo" }
}
compileJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}
dependencies {
    implementation files("src/main/resources/native/${getNativeFolder()}")
    implementation("de.articdive:jnoise-pipeline:4.0.0")
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation "com.badlogicgames.gdx:gdx:1.11.0"
    implementation "com.badlogicgames.gdx:gdx-box2d:1.11.0"
    implementation "com.badlogicgames.gdx:gdx-ai:1.8.2"
    implementation "javax.vecmath:vecmath:1.5.2"
    implementation "com.simsilica:zay-es:1.4.0"
    implementation "com.simsilica:zay-es-net:1.5.0"
    implementation "com.simsilica:sio2:1.7.0"
    implementation "com.simsilica:sim-ethereal:1.7.0"
    implementation("de.articdive:jnoise-pipeline:4.0.0")
    implementation 'com.badlogicgames.gdx:gdx-backend-lwjgl:1.9.12'
    implementation 'com.badlogicgames.gdx:gdx-platform:1.9.12:natives-desktop'
}

jar {
    duplicatesStrategy = 'exclude'
    manifest {
        attributes 'Main-Class': 'fr.iamacat.iamacatblockgame.Main',
                'JVM-Args': '-Xmx4096m -Xms512m -XX:+UseG1GC -Dsun.awt.noerasebackground=true -Djava.library.path=native'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

application {
    mainClassName = 'fr.iamacat.iamacatblockgame.Main'
}

def getNativeFolder() {
    String osName = System.getProperty("os.name").toLowerCase()

    if (osName.contains("win")) {
        return "windows"
    } else if (osName.contains("mac")) {
        return "macosx"
    } else if (osName.contains("linux")) {
        return "linux"
    } else {
        throw new UnsupportedOperationException("Unsupported operating system: " + osName)
    }
}
